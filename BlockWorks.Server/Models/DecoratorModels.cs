
// this code is autogenerated using an early version of Decorator.IO

namespace BlockWorks.Server.Models
{
	public interface IModel
	{
		object[] Serialize();
	}

	public interface IModel<T> : IModel
	{
	}

	public interface IJoin : IModel<IJoin>
	{
		int PlayerId { get; set; }

		string AccountId { get; set; }

		string Username { get; set; }

		uint AvatarId { get; set; }

		int StaffRank { get; set; }

		float XPosition { get; set; }

		float YPosition { get; set; }
	}

	public interface IBlock : IModel<IBlock>
	{
		int Id { get; set; }

		uint Position { get; set; }
	}

	public interface IFly : IModel<IFly>
	{
		int PlayerId { get; set; }

		bool FlyState { get; set; }
	}

	public sealed class Join : IJoin
	{
		public int PlayerId { get; set; }

		public string AccountId { get; set; }

		public string Username { get; set; }

		public uint AvatarId { get; set; }

		public int StaffRank { get; set; }

		public float XPosition { get; set; }

		public float YPosition { get; set; }

		public object[] Serialize() => DecoratorIO.SerializeJoin(this);

		public static bool TryDeserialize(object[] data, out Join instance) =>
			DecoratorIO.TryDeserializeJoin(data, out instance);

		public override string ToString() =>
			$"PlayerId: {this.PlayerId}, AccountId: {this.AccountId}, Username: {this.Username}, AvatarId: {this.AvatarId}, StaffRank: {this.StaffRank}, XPosition: {this.XPosition}, YPosition: {this.YPosition}";
	}

	public sealed class Block : IBlock
	{
		public int Id { get; set; }

		public uint Position { get; set; }

		public object[] Serialize() => DecoratorIO.SerializeBlock(this);

		public static bool TryDeserialize(object[] data, out Block instance) =>
			DecoratorIO.TryDeserializeBlock(data, out instance);

		public override string ToString() => $"Id: {this.Id}, Position: {this.Position}";
	}

	public sealed class Fly : IFly
	{
		public int PlayerId { get; set; }

		public bool FlyState { get; set; }

		public object[] Serialize() => DecoratorIO.SerializeFly(this);

		public static bool TryDeserialize(object[] data, out Fly instance) =>
			DecoratorIO.TryDeserializeFly(data, out instance);

		public override string ToString() => $"PlayerId: {this.PlayerId}, FlyState: {this.FlyState}";
	}

	public static class DecoratorIO
	{
		public static object[] SerializeJoin(Join _2)
		{
			int _0 = 0;
			_0++;
			_0 += 0;
			_0++;
			_0 += 0;
			_0++;
			_0 += 0;
			_0++;
			_0 += 0;
			_0++;
			_0 += 0;
			_0++;
			_0 += 0;
			_0++;
			object[] _1 = new object[_0];
			int _3 = 0;
			_1[_3++] = _2.PlayerId;
			_3 += 0;
			_1[_3++] = _2.AccountId;
			_3 += 0;
			_1[_3++] = _2.Username;
			_3 += 0;
			_1[_3++] = _2.AvatarId;
			_3 += 0;
			_1[_3++] = _2.StaffRank;
			_3 += 0;
			_1[_3++] = _2.XPosition;
			_3 += 0;
			_1[_3++] = _2.YPosition;
			return _1;
		}

		public static object[] SerializeBlock(Block _6)
		{
			int _4 = 0;
			_4++;
			_4 += 0;
			_4++;
			object[] _5 = new object[_4];
			int _7 = 0;
			_5[_7++] = _6.Id;
			_7 += 0;
			_5[_7++] = _6.Position;
			return _5;
		}

		public static object[] SerializeFly(Fly _10)
		{
			int _8 = 0;
			_8++;
			_8 += 0;
			_8++;
			object[] _9 = new object[_8];
			int _11 = 0;
			_9[_11++] = _10.PlayerId;
			_11 += 0;
			_9[_11++] = _10.FlyState;
			return _9;
		}

		public static bool TryDeserializeJoin(object[] _12, out Join _13)
		{
			int _14 = 0;
			_13 = new Join();
			if (_12.Length <= _14)
			{
				return false;
			}

			object _16 = _12[_14++];
			if (!(_16 is int _15))
			{
				return false;
			}

			_13.PlayerId = _15;
			_14 += 0;
			if (_12.Length <= _14)
			{
				return false;
			}

			object _18 = _12[_14++];
			if (_18 == null)
			{
				_13.AccountId = null;
			}
			else if (_18 is string _17)
			{
				_13.AccountId = _17;
			}
			else
			{
				return false;
			}

			_14 += 0;
			if (_12.Length <= _14)
			{
				return false;
			}

			object _20 = _12[_14++];
			if (_20 == null)
			{
				_13.Username = null;
			}
			else if (_20 is string _19)
			{
				_13.Username = _19;
			}
			else
			{
				return false;
			}

			_14 += 0;
			if (_12.Length <= _14)
			{
				return false;
			}

			object _22 = _12[_14++];
			if (!(_22 is uint _21))
			{
				return false;
			}

			_13.AvatarId = _21;
			_14 += 0;
			if (_12.Length <= _14)
			{
				return false;
			}

			object _24 = _12[_14++];
			if (!(_24 is int _23))
			{
				return false;
			}

			_13.StaffRank = _23;
			_14 += 0;
			if (_12.Length <= _14)
			{
				return false;
			}

			object _26 = _12[_14++];
			if (!(_26 is float _25))
			{
				return false;
			}

			_13.XPosition = _25;
			_14 += 0;
			if (_12.Length <= _14)
			{
				return false;
			}

			object _28 = _12[_14++];
			if (!(_28 is float _27))
			{
				return false;
			}

			_13.YPosition = _27;
			return true;
		}

		public static bool TryDeserializeBlock(object[] _29, out Block _30)
		{
			int _31 = 0;
			_30 = new Block();
			if (_29.Length <= _31)
			{
				return false;
			}

			object _33 = _29[_31++];
			if (!(_33 is int _32))
			{
				return false;
			}

			_30.Id = _32;
			_31 += 0;
			if (_29.Length <= _31)
			{
				return false;
			}

			object _35 = _29[_31++];
			if (!(_35 is uint _34))
			{
				return false;
			}

			_30.Position = _34;
			return true;
		}

		public static bool TryDeserializeFly(object[] _36, out Fly _37)
		{
			int _38 = 0;
			_37 = new Fly();
			if (_36.Length <= _38)
			{
				return false;
			}

			object _40 = _36[_38++];
			if (!(_40 is int _39))
			{
				return false;
			}

			_37.PlayerId = _39;
			_38 += 0;
			if (_36.Length <= _38)
			{
				return false;
			}

			// this part is manually edited
			object _42 = _36[_38++];
			if (!(_42 is bool asBool))
			{
				return false;
			}

			_37.FlyState = asBool;

			return true;
		}
	}
}